#!/usr/bin/env ruby
# frozen_string_literal: true

require 'content_style'
require 'yaml'
require 'pathname'
require 'csv'

config_path = File.read(File.join(Dir.pwd, 'config', 'content-style.yml'))
config_file = YAML.load(config_path)
config = config_file.fetch('ContentStyle')
filetype = config.fetch('filetype')
excluded_files = config.fetch('excluded_files', [])
csv = config.fetch('csv', false)
excluded_file_paths =
  excluded_files.map do |excluded_file|
    File.expand_path(excluded_file)
  end

command = ARGV[0] || Dir.pwd
dir_path = File.expand_path(command)
files = Dir.glob(File.join(dir_path, '**', "*.#{filetype}"))

puts "Working directory: #{command}"
puts "Number of files: #{files.count}"

linter = ContentStyle::Linter.new(config)

i = 0
violations = files.flat_map do |file|
  i += 1
  print "Working on file: #{i}"
  print "\r"
  file_content = File.read(file)
  file_path = File.expand_path(file)
  next if excluded_file_paths.include?(file_path)
  next if file_content.empty?
  hotcop_identifiers = ContentStyle::Parser.get_erb_locations(file_content)
  linter.lint_file(ContentStyle::Parser.parse(file_content)).map do |v|
    hotcop_identifiers.reverse.each do |id|
      @erb_location = id[:erb_location] if v[:line] > id[:line]
      next if v[:line] < id[:line]
    end
    html_file_path = Pathname.new(File.expand_path(file_path))
    erb_location_path = Pathname.new(File.expand_path(@erb_location))
    # next unless /app\/views\// =~ erb_location_path.to_s
    root = Pathname.new(Dir.pwd)
    array = []
    array.push(
      html_file_path.relative_path_from(root).to_s,
      v[:line],
      v[:message],
      v[:text],
      erb_location_path.relative_path_from(root).to_s
    )
    array
  end
end

if csv
  csv_path = "#{command}/content-style-output.csv"
  print "Generating CSV at #{csv_path}"
  CSV.open(csv_path, 'wb') do |csv_row|
    csv_row << ['Test HTML file', 'HTML line number', 'Violated rule', 'Violating text',
                'Source file location']
    violations.each do |msg|
      next unless msg
      csv_row << msg
      puts msg.to_s
    end
    results_location = "\nCSV is complete and located at #{csv_path}."
    puts results_location
    csv_row
  end
else
  violations.each do |msg|
    puts msg.to_s
  end
end

puts config.fetch('addendum', '') unless violations.empty?
