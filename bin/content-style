#!/usr/bin/env ruby
# frozen_string_literal: true

require 'content_style'
require 'yaml'
require 'pathname'

config_path = File.read(File.join(Dir.pwd, 'config', 'content-style.yml'))
config_file = YAML.load(config_path)
config = config_file.fetch('ContentStyle')
filetype = config.fetch('filetype')
excluded_files = config.fetch('excluded_files', [])
csv = config.fetch('csv', false)
excluded_file_paths =
  excluded_files.map do |excluded_file|
    File.expand_path(excluded_file)
  end

command = ARGV[0] || Dir.pwd
dir_path = File.expand_path(command)
files = Dir.glob(File.join(dir_path, '**', "*.#{filetype}"))
puts "Working directory: #{command}"
linter = ContentStyle::Linter.new(config)

violations = files.flat_map do |file|
  file_content = File.read(file)
  file_path = File.expand_path(file)
  next if excluded_file_paths.include?(file_path)
  next if file_content.empty?
  hotcop_identifiers = ContentStyle::Parser.get_erb_locations(file_content)
  linter.lint_file(ContentStyle::Parser.parse(file_content)).map do |v|
    hotcop_identifiers.reverse.each do |id|
      @erb_location = id[:erb_location] if v[:line] > id[:line]
      next if v[:line] < id[:line]
    end
    erb_location_path = Pathname.new(File.expand_path(@erb_location))
    root = Pathname.new(Dir.pwd)
    e = erb_location_path.relative_path_from(root)
    f = file_path
    t = v[:text]
    l = v[:line]
    m = v[:message]
    "#{f},#{l},#{t},#{m},#{e}"
  end
end

violations.each do |msg|
  msg_string = msg.to_s
  stdout_msg = msg_string.gsub(dir_path, command)
  puts stdout_msg
end

puts config.fetch('addendum', '') unless violations.empty?

if csv
  csv_path = "#{command}/content-style-output.csv"
  output_csv = File.open(csv_path, 'w')
  output_csv.puts ['Test File,Test File Line,Test File Text,Violation,ERB File']
  violations.each do |msg|
    msg_string = msg.to_s
    csv_msg = msg_string.gsub(dir_path, command)
    output_csv.puts csv_msg
  end
  results_location = "CSV of results is located at #{csv_path}"
  puts results_location
end
