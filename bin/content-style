#!/usr/bin/env ruby
# frozen_string_literal: true

require 'content_style'
require 'yaml'

config_path = File.read(File.join(Dir.pwd, 'config', 'content-style.yml'))
config_file = YAML.load(config_path)
config = config_file.fetch('ContentStyle')
filetype = config.fetch('filetype')
excluded_files = config.fetch('excluded_files', [])
csv = config.fetch('csv', false)
excluded_file_paths =
  excluded_files.map do |excluded_file|
    File.expand_path(excluded_file)
  end

command = ARGV[0] || Dir.pwd
dir_path = File.expand_path(command)
files = Dir.glob(File.join(dir_path, '**', "*.#{filetype}"))
puts command
linter = ContentStyle::Linter.new(config)

violations = files.flat_map do |file|
  file_content = File.read(file)
  file_path = File.expand_path(file)
  next if excluded_file_paths.include?(file_path)
  linter.lint_file(ContentStyle::Parser.parse(file_content)).map do |v|
    m = v[:message]
    l = v[:line]
    "#{file_path}:#{l}: #{m}"
  end
end

violations.each do |msg|
  puts msg
end

puts config.fetch('addendum', '') unless violations.empty?

if csv
  csv_path = command + '/content-style-output.csv'
  output_csv = File.open(csv_path, 'w')
  output_csv.puts ['File,Line,Violation']
  violations.each do |msg|
    csv_msg = msg.to_s.gsub(/\:|\: /, ',')
                 .delete(command + '/')
    output_csv.puts csv_msg
  end
  results_location = 'CSV of results is located at ' + csv_path
  puts results_location
end
